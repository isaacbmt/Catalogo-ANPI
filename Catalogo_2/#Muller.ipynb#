{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "kernel": "SoS"
   },
   "source": [
    "<body>\n",
    "    <div>\n",
    "        <h2 style='font-family: cursive; font-size: 40px;'>Método de Muller</h2>\n",
    "        <img src=https://media.geeksforgeeks.org/wp-content/uploads/Muller-Method.png alt=middle style=\"height: 340px\">\n",
    "    </div>\n",
    "</body>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "kernel": "SoS"
   },
   "source": [
    "<h3 style=\"font-family: 'Courier New'; font-size:25px\">Octave</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "kernel": "Octave"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r =  1.872501287468268e+00 + 6.807418097825466e-02i\r\n",
      "e =\r\n",
      "\r\n",
      " Columns 1 through 3:\r\n",
      "\r\n",
      "   0.000000000000000e+00   7.338144764219641e-02   1.054627577228245e-01\r\n",
      "\r\n",
      " Column 4:\r\n",
      "\r\n",
      "   3.634875628593869e-02\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "format long\n",
    "\n",
    "function [a1,b1,c1]=solve_equations(footion,x0,x1,x2)\n",
    "    warning('off', 'all');\n",
    "    pkg load symbolic\n",
    "#     sympref reset\n",
    "    syms a b c\n",
    "    eqs = [ a*(x0-x1)^2+b*(x0-x1)+c == footion(x0), \n",
    "            a*(x1-x2)^2+b*(x1-x2)+c == footion(x1), \n",
    "            c == footion(x2)];\n",
    "    vars = [a b c];\n",
    "    [a1,b1,c1] = solve(eqs, vars);\n",
    "    a1=cast(a1, \"double\");\n",
    "    b1=cast(b1, \"double\");\n",
    "    c1=cast(c1, \"double\");\n",
    "end\n",
    "\n",
    "function [r,e]=muller_aux(footion,x0,x1,x2,i,tol,iter,e)\n",
    "    if abs(x2-x1)/x2 > tol && i < iter\n",
    "        [A,b,c] = solve_equations(footion,x0,x1,x2);\n",
    "        x3 = x2 - (2*c)/(b+sign(b)*sqrt(b^2-4*a*c));\n",
    "        error = abs(x3-x2)/abs(x3);\n",
    "        [r,e]=muller_aux(footion,x1,x2,x3,i+1,tol,iter,[e error]);\n",
    "    else\n",
    "        r=x2;\n",
    "        e=e;\n",
    "    end\n",
    "end\n",
    "\n",
    "function [r,e]=muller(f, x0, x1, x2, tol, iter)\n",
    "    footion = str2func(strcat('@(x)', f));\n",
    "    \n",
    "    if tol > 10^-16\n",
    "        [r,e] = muller_aux(footion,x0,x1,x2,1,tol,iter,[abs(x2-x2)/x2]);\n",
    "    else\n",
    "        r=0;\n",
    "        e=[];\n",
    "        display(\"La tolerancia es muy pequeña, ponga una más grande.\");\n",
    "    end\n",
    "end\n",
    "\n",
    "[r,e] = muller('sin(x)-x/2', 2, 2.2, 1.8, 10^-8, 4)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "kernel": "Octave"
   },
   "source": [
    "<h3 style=\"font-family: 'Courier New'; font-size:25px\">Python</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\left( 1.676943460220443, \\  \\left[ 0.07338144827099936, \\  0.07338144827099936, \\  0.07338144827099936, \\  0.07338144827099936\\right]\\right)$"
      ],
      "text/plain": [
       "(1.676943460220443, [0.07338144827099936, 0.07338144827099936, 0.0733814482709\n",
       "9936, 0.07338144827099936])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from numpy import sign\n",
    "from math import sqrt\n",
    "\n",
    "def solve_equations(footion, x0, x1, x2):\n",
    "    import sympy as sym\n",
    "    sym.init_printing()\n",
    "    a,b,c = sym.symbols('a,b,c')\n",
    "    eq1 = sym.Eq(a*(x0-x1)**2 + b*(x0-x1) + c, footion.subs({'x':x0}))\n",
    "    eq2 = sym.Eq(a*(x1-x2)**2 + b*(x1-x2) + c, footion.subs({'x':x1}))\n",
    "    eq3 = sym.Eq(c, footion.subs({'x':x2}))\n",
    "    res = sym.solve([eq1, eq2, eq3], (a, b, c))\n",
    "    return res[a], res[b], res[c]\n",
    "    \n",
    "def muller(f, x0, x1, x2, tol, iter):\n",
    "    from sympy import sympify\n",
    "    footion = sympify(f)\n",
    "    e = []\n",
    "    error = tol + 1\n",
    "    for i in range(iter):\n",
    "        if error < tol:\n",
    "            break\n",
    "        a, b, c = solve_equations(footion, x0, x1, x2)\n",
    "        x3 = float(x2 - (2*c)/(b+sign(b)*sqrt(abs(b**2-4*a*c))));\n",
    "        error = abs(x3-x2)/abs(x3);\n",
    "        e.append(error)\n",
    "    return x3, e\n",
    "    \n",
    "muller('sin(x)-x/2', 2, 2.2, 1.8, 10^-8, 4)       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "kernel": "Python 3"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SoS",
   "language": "sos",
   "name": "sos"
  },
  "language_info": {
   "codemirror_mode": "sos",
   "file_extension": ".sos",
   "mimetype": "text/x-sos",
   "name": "sos",
   "nbconvert_exporter": "sos_notebook.converter.SoS_Exporter",
   "pygments_lexer": "sos"
  },
  "sos": {
   "kernels": [
    [
     "Octave",
     "octave",
     "octave",
     "",
     ""
    ],
    [
     "Python 3",
     "python3",
     "python3",
     "",
     ""
    ]
   ],
   "panel": {
    "displayed": true,
    "height": 0
   },
   "version": "0.21.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
